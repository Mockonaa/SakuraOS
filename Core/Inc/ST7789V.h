/*
*
*   Author: Matthias Guth√∂rl (Github - fliescher)
*   Based on ILI9341.h published on https://github.com/NickNagy/Cortet/blob/master/Inc/ILI9341.h
*
*   Using a 16bit LCD Interface!
*
*/


#ifndef MY_ST7789V_H
#define MY_ST7789V_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include "stm32f7xx_hal.h"
#include <stdlib.h>
#include <stdio.h>
#include "fmc.h"


#define ST7789V_SRAM_BANK   1
#define ST7789V_Ax          18

void ST7789V_SEND_COMMAND(uint16_t cmd);
void ST7789V_SEND_DATA(uint16_t data);
uint16_t ST7789V_READ_DATA(void);
void ST7789V_SEND_DATA_BUFFERED(uint16_t *buff, size_t buff_size);

  /** FMC GPIO Configuration
  PD14  ------> FMC_D0
  PD15  ------> FMC_D1
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PE7   ------> FMC_D4
  PE8   ------> FMC_D5
  PE9   ------> FMC_D6
  PE10  ------> FMC_D7

  PE11  ------> FMC_D8
  PE12  ------> FMC_D9
  PE13  ------> FMC_D10
  PE14  ------> FMC_D11
  PE15  ------> FMC_D12
  PD8   ------> FMC_D13
  PD9   ------> FMC_D14
  PD10  ------> FMC_D15

  PD4   ------> FMC_NOE/RD
  PD5   ------> FMC_NWE/WR
  PD11  ------> FMC_A16/RS
  PD7   ------> FMC_NE1/CS
  PE1   ------> FMC_RESET

  PE0   ------> LCD_LIGHT
  PD6	------> LCD_EXTC
  PC8	------> LCD_POW_EN
  PB11	------> LCD_TE
  */

#define FMC_RS_Pin GPIO_PIN_11
#define FMC_RS_GPIO_Port GPIOD
#define FMC_CS_Pin GPIO_PIN_7
#define FMC_CS_GPIO_Port GPIOD
#define FMC_NWE_Pin GPIO_PIN_5
#define FMC_NWE_GPIO_Port GPIOD
#define FMC_NOE_Pin GPIO_PIN_4
#define FMC_NOE_GPIO_Port GPIOD

#define LCD_Backlight_Pin GPIO_PIN_0
#define LCD_Backlight_GPIO_Port GPIOE
#define LCD_EXTC_Pin GPIO_PIN_6
#define LCD_EXTC_GPIO_Port GPIOD
#define LCD_PWR_Pin GPIO_PIN_8
#define LCD_PWR_GPIO_Port GPIOC
#define LCD_TE_Pin GPIO_PIN_11
#define LCD_TE_GPIO_Port GPIOB



/* some custom commands */
// these are non-parallel writes to GPIO, be warned about delays
#define CS_ACTIVE  HAL_GPIO_WritePin(FMC_CS_GPIO_Port, FMC_CS_Pin, 1);
#define CD_COMMAND HAL_GPIO_WritePin(FMC_RS_GPIO_Port, FMC_RS_Pin, 0);
#define CD_DATA    HAL_GPIO_WritePin(FMC_RS_GPIO_Port, FMC_RS_Pin, 1);
#define WR_ACTIVE  HAL_GPIO_WritePin(FMC_NWE_GPIO_Port, FMC_NWE_Pin, 0);
#define WR_IDLE    HAL_GPIO_WritePin(FMC_NWE_GPIO_Port, FMC_NWE_Pin, 1);
#define WR_STROBE  { WR_ACTIVE; WR_IDLE; }
/* end of custom commands */


//LCD dimensions defines
#define ST7789V_WIDTH           320
#define ST7789V_HEIGHT          240
#define ST7789V_PIXEL_COUNT     ST7789V_WIDTH * ST7789V_HEIGHT

//ST7789V LCD commands
#define ST7789V_NOP             0x00        //No Parameter - empty command
#define ST7789V_SWRESET         0x01        //Software Reset
#define ST7789V_RDDID           0x04        //Read Display ID
#define ST7789V_RDDST           0x09        //Read Display Status
#define ST7789V_RDDPM           0x0A        //Read Display Power Mode
#define ST7789V_RDDMADCTL       0x0B        //Read Display MADCTL
#define ST7789V_RDDCOLMOD       0x0C        //Read Display Pixel Format
#define ST7789V_RDDIM           0x0D        //Read Display Image Mode
#define ST7789V_RDDSM           0x0E        //Read Display Signal Mode
#define ST7789V_RDDSDR          0x0F        //Read Display Self-Diagnostic Result
#define ST7789V_SLPIN           0x10        //Sleep in
#define ST7789V_SLPOUT          0x11        //Sleep out
#define ST7789V_PTLON           0x12        //Partial Display Mode on
#define ST7789V_NORON           0x13        //Normal Display Mode on
#define ST7789V_INVOFF          0x20        //Display Inversion Off
#define ST7789V_INVON           0x21        //Display Inversion On
#define ST7789V_GAMSET          0x26        //Gamma Set
#define ST7789V_DISPOFF         0x28        //Display Off
#define ST7789V_DISPON          0x29        //Display On
#define ST7789V_CASET           0x2A        //Column Address Set
#define ST7789V_RASET           0x2B        //Row Address Set
#define ST7789V_RAMWR           0x2C        //Memory Write
#define ST7789V_RAMRD           0x2E        //Memory Read
#define ST7789V_PTLAR           0x30        //Partial Area
#define ST7789V_VSCRDEF         0x33        //Vertical Scrolling Definition
#define ST7789V_TEOFF           0x34        //Tearing Effect Line Off
#define ST7789V_TEON            0x35        //Tearing Effect Line On
#define ST7789V_MADCTL          0x36        //Memory Data Access Control
#define ST7789V_VSCSAD          0x37        //Vertical Scroll Start Address of RAM
#define ST7789V_IDMOFF          0x38        //Idle Mode Off
#define ST7789V_IDMON           0x39        //Idle Mode On
#define ST7789V_COLMOD          0x3A        //Interface Pixel Format
#define ST7789V_WRMEMC          0x3C        //Write Memory Continue
#define ST7789V_RDMEMC          0x3E        //Read memory Continue
#define ST7789V_STE             0x44        //Set Tear Scanline
#define ST7789V_GSCAN           0x45        //Get Scanline
#define ST7789V_WRDISBV         0x51        //Write Display Brightness
#define ST7789V_RDDISBV         0x52        //Read Display Brightness Value
#define ST7789V_WRCTRLD         0x53        //Write CTRL Display
#define ST7789V_RDCTRLD         0x54        //Read CTRL Value Display
#define ST7789V_WRCACE          0x55        //Write Content Adaptive Brightness Control and Color Enhancement
#define ST7789V_RDCABC          0x56        //Read Content Adaptive Brightness Control
#define ST7789V_RDABCSDR        0x68        //Read Atomatic Brightness Control Self-Diagnostic Result
#define ST7789V_RDID1           0xDA        //Read ID 1
#define ST7789V_RDID2           0xDB        //Read ID 2
#define ST7789V_RDID3           0xDC        //Read ID 3

#define ST7789V_RAMCTRL         0xB0        //RAM Control
#define ST7789V_RGBCTRL         0xB1        //RGB Interface Control
#define ST7789V_PORCTRL         0xB2        //Porch Setting
#define ST7789V_FRCTRL1         0xB3        //Frame Rate Control 1 (in partial mode/idle colors)
#define ST7789V_PARCTRL         0xB5        //Partial mode Control
#define ST7789V_GCTRL           0xB7        //Gate Control
#define ST7789V_GTADJ           0xB8        //Gate On Timing Adjustment
#define ST7789V_DGMEN           0xBA        //Digital Gamma Enable
#define ST7789V_VCOMS           0xBB        //VCOMS Setting
#define ST7789V_LCMCTRL         0xC0        //LCM Control
#define ST7789V_IDSET           0xC1        //ID Code Setting
#define ST7789V_VDVVRHEN        0xC2        //VDV and VRH Command Enable
#define ST7789V_VRHS            0xC3        //VRH Set
#define ST7789V_VDVS            0xC4        //VDV Set
#define ST7789V_VCMOFSET        0xC5        //VCOMS Offset Set
#define ST7789V_FRCTRL2         0xC6        //Frame Rate Control in Normal Mode
#define ST7789V_CABCCTRL        0xC7        //CABC Control
#define ST7789V_REGSEL1         0xC8        //Register Value Selection 1
#define ST7789V_REGSEL2         0xCA        //Register Value Selection 2
#define ST7789V_PWMFRSEL        0xCC        //PWM Frequency Selection
#define ST7789V_PWCTRL1         0xD0        //Power Control 1
#define ST7789V_VAPVANEN        0xD2        //Enable VAP/VAN signal output
#define ST7789V_CMD2EN          0xDF        //Command 2 Enable
#define ST7789V_PVGAMCTRL       0xE0        //Positive Voltage Gamma Control
#define ST7789V_NVGAMCTRL       0xE1        //Negative Voltage Gamma Control
#define ST7789V_DGMLUTR         0xE2        //Digital Gamma Look up Table for Red
#define ST7789V_DGMLUTB         0xE3        //Digital Gamma Look up Table for Blue
#define ST7789V_GATECTRL        0xE4        //Gate Control
#define ST7789V_SPI2EN          0xE7        //SPI2 Enable
#define ST7789V_PWCTRL2         0xE8        //Power Control 2
#define ST7789V_EQCTRL          0xE9        //Equalize time control
#define ST7789V_PROMCTRL        0xEC        //Program Mode Control
#define ST7789V_PROMEN          0xFA        //Program Mode Enable
#define ST7789V_NVMSET          0xFC        //NVM Setting
#define ST7789V_PROMACT         0xFE        //Program action


#define ST7789V_MADCTL_MY  				0x80
#define ST7789V_MADCTL_MX  				0x40
#define ST7789V_MADCTL_MV  				0x20
#define ST7789V_MADCTL_ML  				0x10
#define ST7789V_MADCTL_RGB 				0x00
#define ST7789V_MADCTL_BGR 				0x08
#define ST7789V_MADCTL_MH  				0x04




//List of colors
#define COLOR_BLACK           0x0000  
#define COLOR_NAVY            0x000F      
#define COLOR_DGREEN          0x03E0     
#define COLOR_DCYAN           0x03EF  
#define COLOR_MAROON          0x7800 
#define COLOR_PURPLE          0x780F
#define COLOR_OLIVE           0x7BE0     
#define COLOR_LGRAY           0xC618      
#define COLOR_DGRAY           0x7BEF    
#define COLOR_BLUE            0x001F    
#define COLOR_BLUE2			  0x051D
#define COLOR_GREEN           0x07E0      
#define COLOR_GREEN2		  0xB723
#define COLOR_GREEN3		  0x8000
#define COLOR_CYAN            0x07FF   
#define COLOR_RED             0xF800    
#define COLOR_MAGENTA         0xF81F    
#define COLOR_YELLOW          0xFFE0   
#define COLOR_WHITE           0xFFFF     
#define COLOR_ORANGE          0xFD20     
#define COLOR_GREENYELLOW     0xAFE5     
#define COLOR_BROWN 		  0XBC40

static //Text simple font array (You can your own font)
const unsigned char font1[] = {
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
	0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
	0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
	0x18, 0x3C, 0x7E, 0x3C, 0x18,
	0x1C, 0x57, 0x7D, 0x57, 0x1C,
	0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
	0x00, 0x18, 0x3C, 0x18, 0x00,
	0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
	0x00, 0x18, 0x24, 0x18, 0x00,
	0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
	0x30, 0x48, 0x3A, 0x06, 0x0E,
	0x26, 0x29, 0x79, 0x29, 0x26,
	0x40, 0x7F, 0x05, 0x05, 0x07,
	0x40, 0x7F, 0x05, 0x25, 0x3F,
	0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
	0x7F, 0x3E, 0x1C, 0x1C, 0x08,
	0x08, 0x1C, 0x1C, 0x3E, 0x7F,
	0x14, 0x22, 0x7F, 0x22, 0x14,
	0x5F, 0x5F, 0x00, 0x5F, 0x5F,
	0x06, 0x09, 0x7F, 0x01, 0x7F,
	0x00, 0x66, 0x89, 0x95, 0x6A,
	0x60, 0x60, 0x60, 0x60, 0x60,
	0x94, 0xA2, 0xFF, 0xA2, 0x94,
	0x08, 0x04, 0x7E, 0x04, 0x08,
	0x10, 0x20, 0x7E, 0x20, 0x10,
	0x08, 0x08, 0x2A, 0x1C, 0x08,
	0x08, 0x1C, 0x2A, 0x08, 0x08,
	0x1E, 0x10, 0x10, 0x10, 0x10,
	0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
	0x30, 0x38, 0x3E, 0x38, 0x30,
	0x06, 0x0E, 0x3E, 0x0E, 0x06,
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x5F, 0x00, 0x00,
	0x00, 0x07, 0x00, 0x07, 0x00,
	0x14, 0x7F, 0x14, 0x7F, 0x14,
	0x24, 0x2A, 0x7F, 0x2A, 0x12,
	0x23, 0x13, 0x08, 0x64, 0x62,
	0x36, 0x49, 0x56, 0x20, 0x50,
	0x00, 0x08, 0x07, 0x03, 0x00,
	0x00, 0x1C, 0x22, 0x41, 0x00,
	0x00, 0x41, 0x22, 0x1C, 0x00,
	0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
	0x08, 0x08, 0x3E, 0x08, 0x08,
	0x00, 0x80, 0x70, 0x30, 0x00,
	0x08, 0x08, 0x08, 0x08, 0x08,
	0x00, 0x00, 0x60, 0x60, 0x00,
	0x20, 0x10, 0x08, 0x04, 0x02,
	0x3E, 0x51, 0x49, 0x45, 0x3E,
	0x00, 0x42, 0x7F, 0x40, 0x00,
	0x72, 0x49, 0x49, 0x49, 0x46,
	0x21, 0x41, 0x49, 0x4D, 0x33,
	0x18, 0x14, 0x12, 0x7F, 0x10,
	0x27, 0x45, 0x45, 0x45, 0x39,
	0x3C, 0x4A, 0x49, 0x49, 0x31,
	0x41, 0x21, 0x11, 0x09, 0x07,
	0x36, 0x49, 0x49, 0x49, 0x36,
	0x46, 0x49, 0x49, 0x29, 0x1E,
	0x00, 0x00, 0x14, 0x00, 0x00,
	0x00, 0x40, 0x34, 0x00, 0x00,
	0x00, 0x08, 0x14, 0x22, 0x41,
	0x14, 0x14, 0x14, 0x14, 0x14,
	0x00, 0x41, 0x22, 0x14, 0x08,
	0x02, 0x01, 0x59, 0x09, 0x06,
	0x3E, 0x41, 0x5D, 0x59, 0x4E,
	0x7C, 0x12, 0x11, 0x12, 0x7C,
	0x7F, 0x49, 0x49, 0x49, 0x36,
	0x3E, 0x41, 0x41, 0x41, 0x22,
	0x7F, 0x41, 0x41, 0x41, 0x3E,
	0x7F, 0x49, 0x49, 0x49, 0x41,
	0x7F, 0x09, 0x09, 0x09, 0x01,
	0x3E, 0x41, 0x41, 0x51, 0x73,
	0x7F, 0x08, 0x08, 0x08, 0x7F,
	0x00, 0x41, 0x7F, 0x41, 0x00,
	0x20, 0x40, 0x41, 0x3F, 0x01,
	0x7F, 0x08, 0x14, 0x22, 0x41,
	0x7F, 0x40, 0x40, 0x40, 0x40,
	0x7F, 0x02, 0x1C, 0x02, 0x7F,
	0x7F, 0x04, 0x08, 0x10, 0x7F,
	0x3E, 0x41, 0x41, 0x41, 0x3E,
	0x7F, 0x09, 0x09, 0x09, 0x06,
	0x3E, 0x41, 0x51, 0x21, 0x5E,
	0x7F, 0x09, 0x19, 0x29, 0x46,
	0x26, 0x49, 0x49, 0x49, 0x32,
	0x03, 0x01, 0x7F, 0x01, 0x03,
	0x3F, 0x40, 0x40, 0x40, 0x3F,
	0x1F, 0x20, 0x40, 0x20, 0x1F,
	0x3F, 0x40, 0x38, 0x40, 0x3F,
	0x63, 0x14, 0x08, 0x14, 0x63,
	0x03, 0x04, 0x78, 0x04, 0x03,
	0x61, 0x59, 0x49, 0x4D, 0x43,
	0x00, 0x7F, 0x41, 0x41, 0x41,
	0x02, 0x04, 0x08, 0x10, 0x20,
	0x00, 0x41, 0x41, 0x41, 0x7F,
	0x04, 0x02, 0x01, 0x02, 0x04,
	0x40, 0x40, 0x40, 0x40, 0x40,
	0x00, 0x03, 0x07, 0x08, 0x00,
	0x20, 0x54, 0x54, 0x78, 0x40,
	0x7F, 0x28, 0x44, 0x44, 0x38,
	0x38, 0x44, 0x44, 0x44, 0x28,
	0x38, 0x44, 0x44, 0x28, 0x7F,
	0x38, 0x54, 0x54, 0x54, 0x18,
	0x00, 0x08, 0x7E, 0x09, 0x02,
	0x18, 0xA4, 0xA4, 0x9C, 0x78,
	0x7F, 0x08, 0x04, 0x04, 0x78,
	0x00, 0x44, 0x7D, 0x40, 0x00,
	0x20, 0x40, 0x40, 0x3D, 0x00,
	0x7F, 0x10, 0x28, 0x44, 0x00,
	0x00, 0x41, 0x7F, 0x40, 0x00,
	0x7C, 0x04, 0x78, 0x04, 0x78,
	0x7C, 0x08, 0x04, 0x04, 0x78,
	0x38, 0x44, 0x44, 0x44, 0x38,
	0xFC, 0x18, 0x24, 0x24, 0x18,
	0x18, 0x24, 0x24, 0x18, 0xFC,
	0x7C, 0x08, 0x04, 0x04, 0x08,
	0x48, 0x54, 0x54, 0x54, 0x24,
	0x04, 0x04, 0x3F, 0x44, 0x24,
	0x3C, 0x40, 0x40, 0x20, 0x7C,
	0x1C, 0x20, 0x40, 0x20, 0x1C,
	0x3C, 0x40, 0x30, 0x40, 0x3C,
	0x44, 0x28, 0x10, 0x28, 0x44,
	0x4C, 0x90, 0x90, 0x90, 0x7C,
	0x44, 0x64, 0x54, 0x4C, 0x44,
	0x00, 0x08, 0x36, 0x41, 0x00,
	0x00, 0x00, 0x77, 0x00, 0x00,
	0x00, 0x41, 0x36, 0x08, 0x00,
	0x02, 0x01, 0x02, 0x04, 0x02,
	0x3C, 0x26, 0x23, 0x26, 0x3C,
	0x1E, 0xA1, 0xA1, 0x61, 0x12,
	0x3A, 0x40, 0x40, 0x20, 0x7A,
	0x38, 0x54, 0x54, 0x55, 0x59,
	0x21, 0x55, 0x55, 0x79, 0x41,
	0x22, 0x54, 0x54, 0x78, 0x42,
	0x21, 0x55, 0x54, 0x78, 0x40,
	0x20, 0x54, 0x55, 0x79, 0x40,
	0x0C, 0x1E, 0x52, 0x72, 0x12,
	0x39, 0x55, 0x55, 0x55, 0x59,
	0x39, 0x54, 0x54, 0x54, 0x59,
	0x39, 0x55, 0x54, 0x54, 0x58,
	0x00, 0x00, 0x45, 0x7C, 0x41,
	0x00, 0x02, 0x45, 0x7D, 0x42,
	0x00, 0x01, 0x45, 0x7C, 0x40,
	0x7D, 0x12, 0x11, 0x12, 0x7D,
	0xF0, 0x28, 0x25, 0x28, 0xF0,
	0x7C, 0x54, 0x55, 0x45, 0x00,
	0x20, 0x54, 0x54, 0x7C, 0x54,
	0x7C, 0x0A, 0x09, 0x7F, 0x49,
	0x32, 0x49, 0x49, 0x49, 0x32,
	0x3A, 0x44, 0x44, 0x44, 0x3A, 
	0x32, 0x4A, 0x48, 0x48, 0x30,
	0x3A, 0x41, 0x41, 0x21, 0x7A,
	0x3A, 0x42, 0x40, 0x20, 0x78,
	0x00, 0x9D, 0xA0, 0xA0, 0x7D,
	0x3D, 0x42, 0x42, 0x42, 0x3D, 
	0x3D, 0x40, 0x40, 0x40, 0x3D,
	0x3C, 0x24, 0xFF, 0x24, 0x24,
	0x48, 0x7E, 0x49, 0x43, 0x66,
	0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
	0xFF, 0x09, 0x29, 0xF6, 0x20,
	0xC0, 0x88, 0x7E, 0x09, 0x03,
	0x20, 0x54, 0x54, 0x79, 0x41,
	0x00, 0x00, 0x44, 0x7D, 0x41,
	0x30, 0x48, 0x48, 0x4A, 0x32,
	0x38, 0x40, 0x40, 0x22, 0x7A,
	0x00, 0x7A, 0x0A, 0x0A, 0x72,
	0x7D, 0x0D, 0x19, 0x31, 0x7D,
	0x26, 0x29, 0x29, 0x2F, 0x28,
	0x26, 0x29, 0x29, 0x29, 0x26,
	0x30, 0x48, 0x4D, 0x40, 0x20,
	0x38, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x38,
	0x2F, 0x10, 0xC8, 0xAC, 0xBA,
	0x2F, 0x10, 0x28, 0x34, 0xFA,
	0x00, 0x00, 0x7B, 0x00, 0x00,
	0x08, 0x14, 0x2A, 0x14, 0x22,
	0x22, 0x14, 0x2A, 0x14, 0x08,
	0x55, 0x00, 0x55, 0x00, 0x55, 
	0xAA, 0x55, 0xAA, 0x55, 0xAA, 
	0xFF, 0x55, 0xFF, 0x55, 0xFF, 
	0x00, 0x00, 0x00, 0xFF, 0x00,
	0x10, 0x10, 0x10, 0xFF, 0x00,
	0x14, 0x14, 0x14, 0xFF, 0x00,
	0x10, 0x10, 0xFF, 0x00, 0xFF,
	0x10, 0x10, 0xF0, 0x10, 0xF0,
	0x14, 0x14, 0x14, 0xFC, 0x00,
	0x14, 0x14, 0xF7, 0x00, 0xFF,
	0x00, 0x00, 0xFF, 0x00, 0xFF,
	0x14, 0x14, 0xF4, 0x04, 0xFC,
	0x14, 0x14, 0x17, 0x10, 0x1F,
	0x10, 0x10, 0x1F, 0x10, 0x1F,
	0x14, 0x14, 0x14, 0x1F, 0x00,
	0x10, 0x10, 0x10, 0xF0, 0x00,
	0x00, 0x00, 0x00, 0x1F, 0x10,
	0x10, 0x10, 0x10, 0x1F, 0x10,
	0x10, 0x10, 0x10, 0xF0, 0x10,
	0x00, 0x00, 0x00, 0xFF, 0x10,
	0x10, 0x10, 0x10, 0x10, 0x10,
	0x10, 0x10, 0x10, 0xFF, 0x10,
	0x00, 0x00, 0x00, 0xFF, 0x14,
	0x00, 0x00, 0xFF, 0x00, 0xFF,
	0x00, 0x00, 0x1F, 0x10, 0x17,
	0x00, 0x00, 0xFC, 0x04, 0xF4,
	0x14, 0x14, 0x17, 0x10, 0x17,
	0x14, 0x14, 0xF4, 0x04, 0xF4,
	0x00, 0x00, 0xFF, 0x00, 0xF7,
	0x14, 0x14, 0x14, 0x14, 0x14,
	0x14, 0x14, 0xF7, 0x00, 0xF7,
	0x14, 0x14, 0x14, 0x17, 0x14,
	0x10, 0x10, 0x1F, 0x10, 0x1F,
	0x14, 0x14, 0x14, 0xF4, 0x14,
	0x10, 0x10, 0xF0, 0x10, 0xF0,
	0x00, 0x00, 0x1F, 0x10, 0x1F,
	0x00, 0x00, 0x00, 0x1F, 0x14,
	0x00, 0x00, 0x00, 0xFC, 0x14,
	0x00, 0x00, 0xF0, 0x10, 0xF0,
	0x10, 0x10, 0xFF, 0x10, 0xFF,
	0x14, 0x14, 0x14, 0xFF, 0x14,
	0x10, 0x10, 0x10, 0x1F, 0x00,
	0x00, 0x00, 0x00, 0xF0, 0x10,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xFF, 0xFF,
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
	0x38, 0x44, 0x44, 0x38, 0x44,
	0xFC, 0x4A, 0x4A, 0x4A, 0x34, 
	0x7E, 0x02, 0x02, 0x06, 0x06,
	0x02, 0x7E, 0x02, 0x7E, 0x02,
	0x63, 0x55, 0x49, 0x41, 0x63,
	0x38, 0x44, 0x44, 0x3C, 0x04,
	0x40, 0x7E, 0x20, 0x1E, 0x20,
	0x06, 0x02, 0x7E, 0x02, 0x02,
	0x99, 0xA5, 0xE7, 0xA5, 0x99,
	0x1C, 0x2A, 0x49, 0x2A, 0x1C,
	0x4C, 0x72, 0x01, 0x72, 0x4C,
	0x30, 0x4A, 0x4D, 0x4D, 0x30,
	0x30, 0x48, 0x78, 0x48, 0x30,
	0xBC, 0x62, 0x5A, 0x46, 0x3D,
	0x3E, 0x49, 0x49, 0x49, 0x00,
	0x7E, 0x01, 0x01, 0x01, 0x7E,
	0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
	0x44, 0x44, 0x5F, 0x44, 0x44,
	0x40, 0x51, 0x4A, 0x44, 0x40,
	0x40, 0x44, 0x4A, 0x51, 0x40,
	0x00, 0x00, 0xFF, 0x01, 0x03,
	0xE0, 0x80, 0xFF, 0x00, 0x00,
	0x08, 0x08, 0x6B, 0x6B, 0x08,
	0x36, 0x12, 0x36, 0x24, 0x36,
	0x06, 0x0F, 0x09, 0x0F, 0x06,
	0x00, 0x00, 0x18, 0x18, 0x00,
	0x00, 0x00, 0x10, 0x10, 0x00,
	0x30, 0x40, 0xFF, 0x01, 0x01,
	0x00, 0x1F, 0x01, 0x01, 0x1E,
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00  
};

/*
//Functions defines Macros
#ifndef __cplusplus
#define swap(a, b) { int16_t t = a; a = b; b = t; }
#define min(a,b) (((a)<(b))?(a):(b))
#endif
*/
#define pgm_read_byte(addr) (*(const unsigned char *)(addr))


//***** Functions prototypes *****//
//1. Write Command to LCD
//void ST7789V_SendCommand(uint8_t com);
//2. Write data to LCD
//void ST7789V_SendData(uint8_t data);

void ST7789V_enableBacklight();
void ST7789V_disableBacklight();

void ST7789V_enablePower();
void ST7789V_disablePower();

void ST7789V_enableExtendedControl();
void ST7789V_disableExtendedControl();

void ST7789V_writeRegister16(uint8_t r, uint16_t d);
void ST7789V_writeRegister32(uint8_t r, uint32_t d);

void ST7789V_setCursorPosition(uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1);

/* inverts colors of given rows of screen */
void ST7789V_invertRows(uint16_t y0, uint16_t y1);

void ST7789V_init(void);

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color);

void ST7789V_fill(uint16_t color);

void ST7789V_fillRect(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
void drawCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t color);
void fillCircleHelper(uint16_t x0, uint16_t y0, uint16_t r, uint8_t cornername, uint16_t delta, uint16_t color);					///////////////////////////// error
void ST7789V_fillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);														///////////////////////////// error

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
void ST7789V_drawFastHLine(uint16_t x, uint16_t y, uint16_t w, uint16_t color);
void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color);

void ST7789V_drawRect(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);

void ST7789V_drawTriangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);			///////////////////////////// error
void ST7789V_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color);					///////////////////////////// error

void ST7789V_drawChar(uint16_t x, uint16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size);							///////////////////////////// error
void ST7789V_printText(unsigned char text[], uint16_t x, uint16_t y, uint16_t color, uint16_t bg, uint8_t size);					///////////////////////////// error

void ST7789V_printImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size);

void ST7789V_setRotation(uint8_t rotate);




#ifdef __cplusplus
}
#endif

#endif
